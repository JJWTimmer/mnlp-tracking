import sys,osfrom django.contrib.gis.geos import Pointfrom django.core.exceptions import ObjectDoesNotExistfrom lionmap.models import Collar, Positionfrom _sms import SmsParser"""This module should take care of decoding the email attachments.attachment name == which collarattachment contents == multiple time/coordinate/temperature readingsplace them in the database. Maybe use Django ORM?"""class MailProcessor(object):    def __init__(self):        pass    def processMessage(self, message):        #check if message is a valid datapoint        sms = SmsParser(message)                if not sms.isValid:            return                #if Collar is unknown, create collar        try:            c = Collar.object.get(serial=sms.collar)        except ObjectDoesNotExist, err:            c = Collar(serial=sms.collar)            c.save()                #save position        p = Position(            collar = c,            timestamp = sms.time,            coordinate = Point(x=sms.lon, y=sms.lat, z=sms.alt, srid=4326),            temperature = sms.temperature,        )        p.save()